// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_widget_test/calculator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_widget_test/calculator.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Calculator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculator extends _i1.Mock implements _i2.Calculator {
  @override
  double add(
    double? a,
    double? b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [
            a,
            b,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double substract(
    double? a,
    double? b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #substract,
          [
            a,
            b,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double multiply(
    double? a,
    double? b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #multiply,
          [
            a,
            b,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double divide(
    double? a,
    double? b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #divide,
          [
            a,
            b,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  _i3.Future<double> powerTo(
    double? a,
    double? b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #powerTo,
          [
            a,
            b,
          ],
        ),
        returnValue: _i3.Future<double>.value(0.0),
        returnValueForMissingStub: _i3.Future<double>.value(0.0),
      ) as _i3.Future<double>);
  @override
  _i3.Stream<double> pi() => (super.noSuchMethod(
        Invocation.method(
          #pi,
          [],
        ),
        returnValue: _i3.Stream<double>.empty(),
        returnValueForMissingStub: _i3.Stream<double>.empty(),
      ) as _i3.Stream<double>);
}
